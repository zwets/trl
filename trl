#!/bin/bash
#
#  trl - Translate nucleotide sequences to amino acid sequences and back
#  Copyright (C) 2017  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Hardened bash
export LC_ALL="C"
set -euo pipefail

# Exit this script with an error message on stderr
err_exit() { echo "$(basename "$0"): $*" >&2; exit 1; }

# Show usage information and exit
usage_exit() {
    echo "
Usage: $(basename $0) [OPTIONS] [SEQUENCE | FILE ...]

  Translate each line in each FILE from DNA/RNA to amino acids (AA), or
  reverse translate from AA to DNA.  Write the result to stdout.  If no FILE
  is specified, or FILE is '-', read from stdin.  If SEQUENCE is not a file
  name, then it is tried as a literal input sequence (as with -i).

  OPTIONS
   -i, --this=SEQ     Translate literal sequence SEQ, instead of from FILE
   -f, --frame=FRAME  Translate FRAME (-1, -2, -3, 1, 2, 3)
   -r, --reverse      Reverse translate AA to DNA (see below)
   -3, --tla          Write amino acids as three-letter abbrevations (TLAs)
   -a, --amino        Force interpret input as amino acids (when ambiguous)
   -d, --degenerate   Allow degenerate DNA alphabet (r, y, n, etc)
   -x, --use-X        Output X rather than abort on untranslatable codon

  Input may be mixed DNA and RNA sequences in upper or lowercase, or amino
  sequences in uppercase letters or as TLAs.  No spaces are allowed.  Input
  type is auto-detected, or may be forced with option -a when ambiguous.

  Each input line is translated on its own.  FASTA headers are allowed but
  file format must then be unfasta (https://github.com/zwets/unfasta), for
  the logical reason that each input line is translated on its own.

  Reverse translation produces, for a given AA sequence, a regular expression
  that matches every DNA sequence that translates to the amino acid sequence,
  or, with option -d, a sequence with degenerate bases instead (except for
  amino acids L, R, S, and the stop codon, for which this is impossible).
" >&2
    exit ${1:-1}
}

# Defaults

THIS_SEQ='' F_SHIFT=0 F_REV=0 REVERSE=0 TLA=0 AMINO=0 DEGENERATE=0 USE_X=0

# Parse options

parse_frame() {
    case "$1" in
        -1|-2|-3)        F_REV=1 F_SHIFT=$((-1 * $1 - 1)) ;;
        1|2|3|+1|+2|+3)  F_SHIFT="$(($1 - 1))" ;;
        *) err_exit "invalid frame value: $1" ;;
    esac
}

while (( $# )) && [[ -z "${1%%-?*}" ]]; do
    case $1 in
    --t*=*)   THIS_SEQ="${1#--t*=}" ;;
    -i|--th*) shift && THIS_SEQ="$1" || usage_exit ;;
    -r|--r*)  REVERSE=1 ;;
    -3|--tl*) TLA=1 ;;
    -a|--a*)  AMINO=1 ;;
    -d|--d*)  DEGENERATE=1 ;;
    -x|--u*)  USE_X=1 ;;
    --f*=*)   parse_frame "${1#--f*=}" || exit 1 ;;
    -f|--f*)  shift && parse_frame "$1" || exit 1 ;;
    -h|--h*) usage_exit 0 ;;
    *) usage_exit ;;
    esac
    shift
done

# Do the work

if [ -n "$THIS_SEQ" ]; then
    echo "$THIS_SEQ"
elif [ $# -eq 1 ] && [ ! -f "$1" ]; then
    echo "$1"
else
    cat "$@"
fi | awk -v P="$(basename "$0")" -v S=$F_SHIFT -v C=$F_REV -v R=$REVERSE -v L=$TLA -v A=$AMINO -v D=$DEGENERATE -v X=$USE_X '
    BEGIN {
        # TR rna -> aa

        T["aaa"] = "K"; T["aac"] = "N"; T["aag"] = "K"; T["aau"] = "N";
        T["aca"] = "T"; T["acc"] = "T"; T["acg"] = "T"; T["acu"] = "T";
        T["aga"] = "R"; T["agc"] = "S"; T["agg"] = "R"; T["agu"] = "S";
        T["aua"] = "I"; T["auc"] = "I"; T["aug"] = "M"; T["auu"] = "I";

        T["caa"] = "Q"; T["cac"] = "H"; T["cag"] = "Q"; T["cau"] = "H";
        T["cca"] = "P"; T["ccc"] = "P"; T["ccg"] = "P"; T["ccu"] = "P";
        T["cga"] = "R"; T["cgc"] = "R"; T["cgg"] = "R"; T["cgu"] = "R";
        T["cua"] = "L"; T["cuc"] = "L"; T["cug"] = "L"; T["cuu"] = "L";

        T["gaa"] = "E"; T["gac"] = "D"; T["gag"] = "E"; T["gau"] = "D";
        T["gca"] = "A"; T["gcc"] = "A"; T["gcg"] = "A"; T["gcu"] = "A";
        T["gga"] = "G"; T["ggc"] = "G"; T["ggg"] = "G"; T["ggu"] = "G";
        T["gua"] = "V"; T["guc"] = "V"; T["gug"] = "V"; T["guu"] = "V";

        T["uaa"] = "*"; T["uac"] = "Y"; T["uag"] = "*"; T["uau"] = "Y";
        T["uca"] = "S"; T["ucc"] = "S"; T["ucg"] = "S"; T["ucu"] = "S";
        T["uga"] = "*"; T["ugc"] = "C"; T["ugg"] = "W"; T["ugu"] = "C";
        T["uua"] = "L"; T["uuc"] = "F"; T["uug"] = "L"; T["uuu"] = "F";

        # TR in short:
        # KNKN TTTT RSRS IIMI
        # QHQH PPPP RRRR LLLL
        # EDED AAAA GGGG VVVV
        # *Y*Y SSSS *CWC LFLF

        # Some binary synonyms using the extended alphabet
        # :: r=ag y=ct s=cg k=gt m=ac w=at b=~a v=~t d=~c h=~g n=.
        T["aar"] = "K"; T["car"] = "Q"; T["gar"] = "E"; T["uar"] = "*";
        T["aay"] = "N"; T["cay"] = "H"; T["gay"] = "D"; T["uay"] = "Y";
        T["uay"] = "Y"; T["ugy"] = "C"; T["uuy"] = "F"; T["uur"] = "L";
        T["agr"] = "R"; T["agy"] = "S";
        # Some universal synonyms using the extended alphabet
        # (note there are many more)
        T["cun"] = "L"; T["cgn"] = "R"; T["gun"] = "V"; T["ggn"] = "G";
        T["acn"] = "T"; T["ccn"] = "P"; T["gcn"] = "A"; T["ucn"] = "S";

        # RTR: aa -> dna

        IT["K"] = "aa[ag]";     IT["N"] = "aa[ct]";     IT["T"] = "ac.";
        IT["R"] = "(aga|agg|cg.)"; IT["S"] = "(agc|agt|tc.)";
        IT["I"] = "at[act]";    IT["M"] = "atg";
        IT["Q"] = "ca[ag]";     IT["H"] = "ca[ct]";
        IT["P"] = "cc.";        IT["L"] = "(tta|ttg|ct.)";
        IT["E"] = "ga[ag]";     IT["D"] = "ga[ct]";
        IT["A"] = "gc.";        IT["G"] = "gg.";        IT["V"] = "gt.";
        IT["Y"] = "ta[ct]";     IT["*"] = "(taa|tag|tga)";
        IT["C"] = "tg[ct]";     IT["W"] = "tgg";        IT["F"] = "tt[ct]";

        # RTR with degen bases

        ID["K"] = "aar";       ID["N"] = "aay";        ID["T"] = "acn";
        ID["R"] = "(agr|cgn)"; ID["S"] = "(agy|tcn)";
        ID["I"] = "ath";       ID["M"] = "atg";
        ID["Q"] = "car";       ID["H"] = "cay";
        ID["P"] = "ccn";       ID["L"] = "(ttr|ctn)";
        ID["E"] = "gar";       ID["D"] = "gay";
        ID["A"] = "gcn";       ID["G"] = "ggn";        ID["V"] = "gtn";
        ID["Y"] = "tay";       ID["*"] = "(tar|tra)";
        ID["C"] = "tgy";       ID["W"] = "tgg";        ID["F"] = "tty";

        # A3: aa -> tla

        A3["A"] = "Ala"; A3["B"] = "Asx"; A3["C"] = "Cys"; A3["D"] = "Asp";
        A3["E"] = "Glu"; A3["F"] = "Phe"; A3["G"] = "Gly"; A3["H"] = "His";
        A3["I"] = "Ile"; A3["K"] = "Lys"; A3["L"] = "Leu"; A3["M"] = "Met";
        A3["N"] = "Asn"; A3["P"] = "Pro"; A3["Q"] = "Gln"; A3["R"] = "Arg";
        A3["S"] = "Ser"; A3["T"] = "Thr"; A3["V"] = "Val"; A3["W"] = "Trp";
        A3["Y"] = "Tyr"; A3["Z"] = "Glx"; A3["*"] = "***"; A3["X"] = "???";

        # R3: tla -> aa

        R3["Ala"] = "A"; R3["Asx"] = "B"; R3["Cys"] = "C"; R3["Asp"] = "D";
        R3["Glu"] = "E"; R3["Phe"] = "F"; R3["Gly"] = "G"; R3["His"] = "H";
        R3["Ile"] = "I"; R3["Lys"] = "K"; R3["Leu"] = "L"; R3["Met"] = "M";
        R3["Asn"] = "N"; R3["Pro"] = "P"; R3["Gln"] = "Q"; R3["Arg"] = "R";
        R3["Ser"] = "S"; R3["Thr"] = "T"; R3["Val"] = "V"; R3["Trp"] = "W";
        R3["Tyr"] = "Y"; R3["Glx"] = "Z"; R3["***"] = "*"; R3["Stp"] = "*";
        R3["???"] = "X";

        UNFASTA=0
        IN_TYPE=""
    }
    # On the first line of data (line 2 if unfasta) determine type
    NR - UNFASTA == 1 {

        if ($0 ~ /^>/) {
            UNFASTA = 1
        } else if (!R && !A && (($0 ~ /^[ACGTUacgtu]*$/) || D)) {
            IN_TYPE="nt"; A = 0;
        } else if (!(R && L) && $0 ~ /^[ABCDEFGHIKLMNPQRSTVWYZ*]+$/) {
            IN_TYPE="aa"; A = 1;
        } else if ($0 ~ /^([[:upper:]][[:lower:]][[:lower:]]|\*\*\*)+$/) {
            IN_TYPE="la"; A = 1;
        } else {
            err_exit("invalid input: " $0 " (maybe use -d and/or -x)")
        }
        if (IN_TYPE != "nt" && !UNFASTA && (S || C)) {
            err_exit("frame option is valid only when translating nucleotides");
        } else if (IN_TYPE == "aa" && !R && !L) {
            err_exit("input are amino acids; use option -3 to convert to TLA, or -r to reverse translate");
        } else if (IN_TYPE == "la" && !R && L) {
            err_exit("input are TLA amino acids; omit option -3 to convert to letters, or -r to reverse translate");
        }
    }

    UNFASTA && NR%2==1 {
        if ($0 ~ /^>/) print;
        else err_exit("invalid unfasta file: odd lines must have FASTA header (see --help)");
    }

    # Every line (or every even line when UNFASTA)
    !UNFASTA || NR%2==0 {

        STEP = IN_TYPE == "aa" ? 1 : 3;
        for (i = 1+S; i <= length($0)-STEP+1; i+=STEP) printf "%s", trans(substr($0,i,STEP));
        printf "\n"
    }

    function err_exit(s) {
        print P ": " s > "/dev/stderr"
        exit 1
    }
    function trans(s,   t,r) {   # AWK local param idiom

        if (IN_TYPE=="la") {
            t = R3[s]; if (!t) err_exit("unknown amino acid TLA: " s);
            s = t;
        } else if (C) {
            s = reverse(s);
        }

        if (R) {
            t = D ? ID[s] : IT[s];
            if (!t) err_exit("cannot reverse translate amino acid: " s);
            r = t;
        }
        else if (A) {
            r = L ? A3[s] : s;
        }
        else {
            s = tolower(s)
            gsub("t","u", s);
            t = T[s]; if (!t) {
                 if (X) t = "X"; else err_exit("cannot translate codon: " s " (maybe use -d and/or -x)");
                }
            r = L ? A3[t] : t;
        }
        return r;
    }
    function reverse(s,   j,r) {
        r = "";
        for (j = length(s); j >= 1; --j) r = r substr(s,j,1);
        return r;
    }
    ' -

# vim: sts=4:sw=4:et:si:ai
